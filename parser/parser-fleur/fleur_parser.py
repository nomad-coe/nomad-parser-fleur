from builtins import object
import setup_paths
from nomadcore.simple_parser import SimpleMatcher as SM
from nomadcore.simple_parser import mainFunction, AncillaryParser, CachingLevel
from nomadcore.local_meta_info import loadJsonFile, InfoKindEl
import os, sys, json
#import fleur_parser_inp


################################################################
# This is the parser for the main output file of Fleur (out)
################################################################


class FleurContext(object):
    """context for the fleur parser"""

    def __init__(self):
        self.parser = None

    def initialize_values(self):
        """allows to reset values if the same superContext is used to parse different files"""
        pass

    def startedParsing(self, path, parser):
        """called when parsing starts"""
        self.parser = parser
        # allows to reset values if the same superContext is used to parse different files
        self.initialize_values()

    def onClose_x_fleur_header(self, backend, gIndex, section):
        backend.addValue("program_version",
                         section["x_fleur_version"][0])

    def onOpen_section_system(self, backend, gIndex, section):
        mainFile = self.parser.fIn.fIn.name
        fName = mainFile[:-4] + ".inp"
        if os.path.exists(fName):
            structSuperContext = fleur_parser_inp.FleurInpContext()
            structParser = AncillaryParser(
                fileDescription = fleur_parser_inp.buildStructureMatchers(),
                parser = self.parser,
                cachingLevelForMetaName = fleur_parser_inp.get_cachingLevelForMetaName(self.metaInfoEnv, CachingLevel.PreOpenedIgnore),
                superContext = inpSuperContext)

            with open(fName) as fIn:
                inpParser.parseFile(fIn)


# description of the input
mainFileDescription = SM(
              name = 'root',
              weak = True,
              startReStr = "",
              subMatchers = [
                SM(name = 'newRun',
                startReStr = r"\s* This output is generated by\s*[\w*.]+\s*\w*\*\s\*",
                repeats = True,
                required = True,
                forwardMatch = True,
                sections   = ['section_run','section_method', 'section_system', 'section_single_configuration_calculation'],
                subMatchers = [
                SM(name = 'header',
                  startReStr = r"\s* This output is generated by\s*(?P<x_fleur_version>[\w*.]+)\s*\w*\*\s\*",
                  sections=["x_fleur_header"],
                  fixedStartValues={'program_name': 'Fleur', 'program_basis_set_type': 'FLAPW' }
                  ),
                 SM(name = 'systemName',
                    startReStr = r"\s*strho.*\n(?P<x_fleur_system_name>.*)",#L140
                    sections = ["section_system"],
                    subMatchers=[
                        SM(r"\s*k_max\s=\s*(?P<x_fleur_k_max>.*)"),#L154
                        SM(r"\s*G_max\s=\s*(?P<x_fleur_G_max>.*)"),#L155
                        SM(r"\s*number of atom types=\s*(?P<x_fleur_nr_of_atom_types>[0-9]+)"),#L160
                        SM(r"\s*total number of atoms=\s*(?P<x_fleur_total_atoms>[0-9]+)"),


                        SM(r"\s*total electronic charge   =\s*(?P<x_fleur_tot_elec_charge>.*)"),#L1107
                        SM(r"\s*total nuclear charge      =\s*(?P<x_fleur_tot_nucl_charge>.*)") #L1108

                    ]),
            
                SM(
                      name = "scf iteration",
                      startReStr = r"\s*it=       (?P<x_fleur_iteration_number>[0-9]+)",
                      sections=["section_scf_iteration"],
                      repeats = True,
                      subMatchers=[
                #          SM(r"\s*strho.*\n(?P<x_fleur_system_name>.*)"), #L140

                     #     SM(r"\s*exchange-correlation:\s*(?P<exch_pot>\w*\s*.*)"),
                     #     SM()
                      ]
                    )
                ])
              ])

# loading metadata from nomad-meta-info/meta_info/nomad_meta_info/fleur.nomadmetainfo.json

parserInfo = {
  "name": "Fleur_parser",
  "version": "1.0"
}

metaInfoPath = os.path.normpath(os.path.join(os.path.dirname(os.path.abspath(__file__)),"../../../../nomad-meta-info/meta_info/nomad_meta_info/fleur.nomadmetainfo.json"))
metaInfoEnv, warnings = loadJsonFile(filePath = metaInfoPath, dependencyLoader = None, extraArgsHandling = InfoKindEl.ADD_EXTRA_ARGS, uri = None)

if __name__ == "__main__":
    superContext = FleurContext()
    mainFunction(mainFileDescription, metaInfoEnv, parserInfo, superContext = superContext)
